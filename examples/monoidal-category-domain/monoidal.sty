Object o {
    -- object should be as horizontal as possible

    vec2 o.v1 = (?, ?)
    vec2 o.v2 = (?, ?)

    shape o.shape = Line {
        start: o.v1
        end: o.v2

        color: rgba(0., 0., 0., 1.)
        thickness: 5.
    }

    ensure equal(o.v1[1], o.v2[1]) -- ensure lines are horizontal
    ensure lessThan(o.v1[0], o.v2[0]) -- ensure lines move from left to right

    -- lines should have a nice length, roughly equal to one another
}

Object o 
where o := tensor(a, b) 
with Object a; Object b {
    override o.shape.color = rgba(0.7, 0.3, 0.9, 0.5)

    override a.v1[0] = o.v1[0]
    override a.v1[1] = o.v1[1] + 50.
    override b.v1[0] = o.v1[0]
    override b.v1[1] = o.v1[1] - 50.
    
    override a.v2[0] = o.v2[0]
    override a.v2[1] = o.v2[1] + 50.
    override b.v2[0] = o.v2[0]
    override b.v2[1] = o.v2[1] - 50.
}

Morphism m {
    -- morphism should all be roughly congruent (higher priority than horizontality of objects)
    shape m.shape = Rectangle {
        w: 100.
        h: 300.
    }

    shape m.text = Text {
        string: m.label
        fontSize: "30pt"
    }

    ensure contains(m.shape, m.text) -- keep label inside box
}

Morphism m
where m := join(a, b)
with Object a; Object b {
    -- attach objects to morphism
    override a.v2[0] = m.shape.center[0] - m.shape.w/2.
    override b.v1[0] = m.shape.center[0] + m.shape.w/2.

    override a.v2[1] = m.shape.center[1]
    override b.v1[1] = m.shape.center[1]
}